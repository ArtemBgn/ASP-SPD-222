@inject ASP_SPD_222.Services.Hash.IHashService hashService
@{
    ViewData["Title"] = "Ioc";
}
<h1 class="display-4">Інверсія управління (@ViewData["Title"])</h1>
<p>
    Інверсія управління (Ioc, Inversion of Control) - схема побудови архітектури проєкту
    за якої управління життєвим циклом об'єкту делегує'ться окремому модулю. Життєвий цикл - 
    СRUD - створення, впровадження, підтримка (модифікація) видалення.
    Ідея полягає у тому, що спочатку вдбувається реєстрація служб - провайдерів об'єктів.
    На другому етапі відбувається розв'язування (Resolve) залежностей, тобто побудова об'єкту з усіма
    заявленими залежностями від інших об'єктів (служб, сервісів).
</p>
<p>
    DIP (Dependency Inversion Principle) - принцип інверсії залежностей.
    Це принцип SOLID, який пропонує створювати залежності не від конкретних
    типів а від інтерейсів. Це дозволяє легко замінти один тип на інший,
    якщо вони реалізують один інтерфейс.
</p>
<p>
    На прикладі служби гешування. (ГЕШування - розширення поняття контрольної
    суми - пересвідчення в тому, що це саме той об'єкт). <i>Стврювати залежності
    від абстракції а не від реалізації</i>
</p>
<ul>
    <li>
        Сервіси є структурною частиною проєкту, більш того, часто мають
        універсальне значення (можуть бути перенесені до іншого проєкту).

    </li>
    <li>
        За рекомендаціями DIP/SOLID навіть одиночний сервіс-клас має
        супроводжуватись інтерфейсом, тобто на один сервіс припадає декілька
        файлів-класів. відповідно, кожен з сервісів також уміщують в окрему 
        папку("Hash"). У ній створюємо інтерфейс та клас.
    </li>
    <li>
        Реєструємо сервіс. У Program.сs знаходемо розділ
        <code>var app = builder.Build();</code> та додаємо інструкцію
        реєстрації<br/>
        <code>
            builder.Services.AddSingleton<IHashService, Md5HashServices>();
        </code> <br/>
        Це можна уявити як: "Будуть запитувати IHashService - видати Md5HashService"
    </li>
    <li>
        Заявляємо залежності - у контролері створюємо поле типу IHashService
        (див. HomeController)
    </li>
    <li>
        Уявляємо задачу переходу на іншу схему гешування. Для цього
        <ul>
            <li>
                у папці
                /Services/Hash створюємо ще один клас, що реалізує той ж самий
                інтерфейс IHashService - Sha1HashService
            </li>
            <li>
                у Program.cs - замінюємо інструкцію реєстрації з новим класом
                <code>builder.Services.AddSingleton<IHashService, Sha1HashServices>();</code>
            </li>
        </ul>
    </li>
    <li></li>
</ul>
<p>
    hash = @ViewData["hash"]
</p>
<h2>SCOPE - область "життя" сервісу</h2>
<p>
    При реєстрації служби зазначається її Scope - поведінка щодо
    повторних запитів на інжекцію. У ASP - є три області:
    Singlton - не змінний об'єкт, всі точки інжекції отримують
    посилання на один й той самий об'єкт
    Transient - "одноразовий", кожна точка новий об'єкт
    RequestScope - це постійний протягом одного запиту, наступний
    запит - нове створення об'єкта (як час життя контроллера)
</p>
<p>
    hash = @ViewData["hash"]<br/>
    hashCode(controller) = @ViewData["objHash"]<br/>
    hasCode(view) = @(hashService.GetHashCode())<br />
    valid = @ViewData["valid"]<br />
</p>